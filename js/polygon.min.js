/*
 * Developed by The Di Lab
 * www.the-di-lab.com
 * 22.06.2010
 */
 
var fPolyArea; // Biến lưu diện tích của Polygon

function box(colour,text1,text2) 
{
	return '<div style="width:80px;height:80px;color:'+colour+'"><center><b>' +
	  text1+'<br>' +
	  '<div style="width:40px;height:40px;border:2px solid '+colour+'">&nbsp;<\/div>' +
	  text2+'<br>' +
	  '<\/b><\/center></\div>';
}


function random_color() 
{
	var letters = '0123456789ABCDEF'.split('');
	var color = '#';
	for (var i = 0; i < 6; i++ ) {
		color += letters[Math.round(Math.random() * 15)];
	}
	return color;
}

function ShowServerPolygon(map, myData, arrCoso, arrPen) {
	for (var i = 0; i < myData.length; ++i) {
		var myPen = new Pen(this.map);
	    var myPolygon = new Polygon(myData[i], map, this, random_color(), arrCoso[i].sSodoaonuoi, arrCoso[i].sMaso_vietgap,arrCoso[i].sTencoso,arrCoso[i].sTendoituong,arrCoso[i].fTongdientich,arrCoso[i].dNgaycap);
	    myPen.polygon = myPolygon;
	    arrPen.push(myPen);
	    //
//		var label = new ELabel(getPolyCenter(myPen), box("#dd0000", arrCoso[i].sTencoso, "ádff"), null, new GSize(-40, 22));
//	    map.addMaker(label);
//	    alert("da add label");

	    //var pos = getPolyCenter(myPen);
        /*
	    $('main-map').gmap3(
        { action: 'addMarker',
            latLng: pos,
            map: {
                center: true
            }
        },
        { action: 'addOverlay',
            content: '<div style="color:#000000; border:1px solid #FF0000; ' +
        'background-color: #00FF00; width:200px; line-height:20px; ' +
        'height: 20px; text-align:center">Hello World !</div>',
            latLng: pos,
            offset: {
                y: -32,
                x: 12
            }
        }
        );
        */



	    /*
	    {
	        var gIcon = new GIcon();
	        gIcon.image = "Transparnt.png";
	        gIcon.iconSize = new GSize(49, 52);
	        gIcon.iconAnchor = new GPoint(24, 33);
	    }
	    {
	        var StvMarker = new GMarker(getPolyCenter(myPen), { icon: gIcon });

	        // This is importet to set a id to find later the DOM-Objekt,
	        // and Google set automatic a prefix 'mtgt_'
	        StvMarker.id = "streetViewMan";
	        map.addOverlay(StvMarker);
	    }
        */
	    
		//
		
	}
}

 function getPolyCenter(oPen) 
{
	var bounds = new google.maps.LatLngBounds();
	var paths = oPen.getRawData();
	var path;
	for (var p = 0; p < paths.getLength(); p++) {
		path = paths.getAt(p);
		for (var i = 0; i < path.getLength(); i++) {
			bounds.extend(path.getAt(i));
		}
	}
    //var PolyCenter = bounds.getCenter();
    return bounds.getCenter();
	//var label = new ELabel(PolyCenter, "Utopia", "style2");
	//label.setMap(map);
	//var marker = new google.maps.Marker({ position: PolyCenter, map: this.map, title: "AAA", icon: '' });
}

function RemovePolygon(arrPen, myData, arrCoso)
{
	if(arrPen == null)
		return;
	for(var i=0; i<arrPen.length; ++i)
	{
		arrPen[i].deleteMis();
        if(null != arrPen[i].polygon)
		{
			arrPen[i].polygon.remove();
		}
	}
	myData = null;
	arrPen = null;
	arrCoso = null;
}

function PolygonCreator(map) 
{
	this.map = map;
	this.pen = new Pen(this.map);
	var thisOjb = this; 
	this.event = google.maps.event.addListener(thisOjb.map, 'click', function (event) { thisOjb.pen.draw(event.latLng); });
	this.showData=function(){return this.pen.getData();}
	this.showColor = function () { return this.pen.getColor(); }

	this.destroy=function()
	{
	    this.pen.deleteMis();
        if(null!=this.pen.polygon)
		{
			this.pen.polygon.remove();
		}
		google.maps.event.removeListener(this.event);
    }
    this.Area = function () {
        var a = 0;
        var j = 0;
        var bounds = new google.maps.LatLngBounds();
        var paths = this.pen.getRawData();
        var path;
        for (var p = 0; p < paths.getLength(); p++) {
            path = paths.getAt(p);
            for (var i = 0; i < path.getLength(); i++) {
                bounds.extend(path.getAt(i));
            }
        }
        var x0 = bounds.getSouthWest().lng();
        var y0 = bounds.getSouthWest().lat();
        for (var i = 0; i < paths.getLength(); i++) {
            j++;
            if (j == paths.getLength()) { j = 0; }
            var x1 = paths.getAt(i).distanceFrom(new google.maps.LatLng(paths.getAt(i).lat(), x0));
            var x2 = paths.getAt(j).distanceFrom(new google.maps.LatLng(paths.getAt(j).lat(), x0));
            var y1 = paths.getAt(i).distanceFrom(new google.maps.LatLng(y0, paths.getAt(i).lng()));
            var y2 = paths.getAt(j).distanceFrom(new google.maps.LatLng(y0, paths.getAt(j).lng()));
            a += x1 * y2 - x2 * y1;
        }
    return Math.abs(a * 0.5);
    }
    
}

function DienTich(objPen) {
    var a = 0;
    var j = 0;
    var bounds = new google.maps.LatLngBounds();
    var paths = objPen.getRawData();
    var path;
    for (var p = 0; p < paths.getLength(); p++) {
        path = paths.getAt(p);
        for (var i = 0; i < path.getLength(); i++) {
            bounds.extend(path.getAt(i));
        }
    }
    var x0 = bounds.getSouthWest().lng();
    var y0 = bounds.getSouthWest().lat();
    for (var i = 0; i < paths.getLength(); i++) {
        j++;
        if (j == paths.getLength()) { j = 0; }
        var x1 = paths.getAt(i).distanceFrom(new google.maps.LatLng(paths.getAt(i).lat(), x0));
        var x2 = paths.getAt(j).distanceFrom(new google.maps.LatLng(paths.getAt(j).lat(), x0));
        var y1 = paths.getAt(i).distanceFrom(new google.maps.LatLng(y0, paths.getAt(i).lng()));
        var y2 = paths.getAt(j).distanceFrom(new google.maps.LatLng(y0, paths.getAt(j).lng()));
        a += x1 * y2 - x2 * y1;
    }
    return Math.abs(a * 0.5);
}

function Pen(map)
{
	this.map=map;
	this.listOfDots=new Array();
	this.polyline=null;
	this.polygon=null;
	this.currentDot=null;
	this.fKinhdo = null;
	this.fVido = null;
	this.draw = function (latLng) {
	    //alert("latLng = " + latLng);//-------------------------
	    if (null != this.polygon) {
	        alert('Nhấn \"Hủy\" để vẽ lại sơ đồ khác!');
	    }
	    else {
	        if (this.currentDot != null && this.listOfDots.length > 1 && this.currentDot == this.listOfDots[0]) {
	            this.drawPloygon(this.listOfDots);
	            var sCenter = "" + getPolyCenter(this);
	            sCenter = sCenter.substring(1, sCenter.length - 1);
	            this.fVido = sCenter.substring(0, sCenter.indexOf(","));
	            this.fKinhdo = sCenter.substring(sCenter.indexOf(",") + 2);
	            //alert("s = " + sCenter + " x = " + sCenter.substring(0, sCenter.indexOf(",")) + " Y = " + sCenter.substring(sCenter.indexOf(",") + 1), sCenter.length);
	            //var txtTongdientich = document.getElementById('<%= txtTongDienTichCoSoNuoi.ClientID %>');
	            //txtTongdientich.value = DienTich(this);
	            //$('#dataPanel').append(fPolyArea);
	            //Hiển thị nút cho phép lưu
	            document.getElementById("btnSave").disabled = "";
	        }
	        else {
	            if (null != this.polyline) {
	                this.polyline.remove();
	            }
	            var dot = new Dot(latLng, this.map, this);
	            this.listOfDots.push(dot);
	            if (this.listOfDots.length > 1) {
	                this.polyline = new Line(this.listOfDots, this.map);
	            }
	        }
	    }
	}
	this.drawPloygon=function(listOfDots,color,des,id)
	{
	    this.polygon = new Polygon(listOfDots, this.map, this, color, des, id);
        fPolyArea = this.polygon.Area;
		this.deleteMis();
    }
    this.getRawData = function () {
        if (this.polygon != null) {
            return this.polygon.getPlots();
        } else {
            return null;
        }
    }
	this.deleteMis = function () 
    {
        $.each(this.listOfDots,function(index,value){value.remove();});
		this.listOfDots.length=0;
		if(null!=this.polyline)
		{
			this.polyline.remove();
			this.polyline=null;
		}
	}
	this.cancel=function(){if(null!=this.polygon){(this.polygon.remove());}
	this.polygon=null;this.deleteMis();}
	this.setCurrentDot = function (dot) { this.currentDot = dot; }

	//sửa lại đoạn này để lấy cả mảng tọa độ ra
	this.getData=function()
	{
		if(this.polygon!=null)
		{
			var data="";
			var paths=this.polygon.getPlots();
			paths.getAt(0).forEach(function(value,index){data+=(value.toString());});
			return data;
		}
		else
		{
			return null;
		}
	}
	this.getColor=function()
	{
		if(this.polygon!=null)
		{
			var color=this.polygon.getColor();
			return color;
		}
		else
		{
			return null;
		}
	}
}
function Dot(latLng,map,pen)
{
	this.latLng=latLng;
	this.parent=pen;
	this.markerObj=new google.maps.Marker({position:this.latLng,map:map});
	this.addListener=function()
	{
		var parent=this.parent;
		var thisMarker=this.markerObj;
		var thisDot=this;
		google.maps.event.addListener(thisMarker,'click',function()
		{
			parent.setCurrentDot(thisDot);
			parent.draw(thisMarker.getPosition());
		});
	}
	this.addListener();
	this.getLatLng=function(){return this.latLng;}
	this.getMarkerObj=function(){return this.markerObj;}
	this.remove=function(){this.markerObj.setMap(null);}
}
function Line(listOfDots,map)
{
	this.listOfDots=listOfDots;
	this.map=map;
	this.coords=new Array();
	this.polylineObj=null;
	if(this.listOfDots.length>1)
	{
		var thisObj=this;
		$.each(this.listOfDots,function(index,value){thisObj.coords.push(value.getLatLng());});
		this.polylineObj=new google.maps.Polyline({path:this.coords,strokeColor:"#FF0000",strokeOpacity:1.0,strokeWeight:2,map:this.map});
	}
	this.remove=function(){this.polylineObj.setMap(null);}
}
function Polygon(listOfDots, map, pen, color, sSodoaonuoi, sVietGAP, sTencoso, sDoituong, sDientich, sNgaycap) {

    //Thong tin co so nuoi trong
	this.sSodoaonuoi = sSodoaonuoi;
    this.sVietGAP = sVietGAP;
    this.sTencoso = sTencoso;
    this.sDoituong = sDoituong;
    this.sDientich = sDientich;
    this.sNgaycap = sNgaycap;
	this.color = color;
    //
	this.listOfDots=listOfDots;
	this.map=map;
	this.coords=new Array();
	this.parent=pen;
	this.des='Hello';
	var thisObj=this;
	$.each(this.listOfDots,function(index,value){thisObj.coords.push(value.getLatLng());});
	this.polygonObj=new google.maps.Polygon({paths:this.coords,strokeColor:"#00000F",strokeOpacity:0.8,strokeWeight:1,fillColor:this.color, fillOpacity:0.35,map:this.map});
	this.remove=function()
	{
		this.info.remove();
		this.polygonObj.setMap(null);
	}
	this.getContent=function(){return this.des;}
	this.getPolygonObj=function(){return this.polygonObj;}
	this.getListOfDots=function(){return this.listOfDots;}
	this.getPlots=function()
	{
		return this.polygonObj.getPaths();
	}
	this.getColor=function(){return this.getPolygonObj().fillColor;}
	this.setColor=function(color){return this.getPolygonObj().setOptions({fillColor:color,strokeColor:color,strokeWeight:2});}
	this.info=new Info(this,this.map);
	this.addListener=function()
	{
		var info=this.info;
		var thisPolygon=this.polygonObj;
		google.maps.event.addListener(thisPolygon,'click',function(event){info.show(event.latLng);});
		//Kiểm tra trùng điểm
		//google.maps.event.addListener(thisPolygon,'click',function(event){alert("Không được vẽ trùng lên vùng đã tồn tại!");});
	}
    google.maps.Polygon.prototype.Area = function() {
      var a = 0;
      var j = 0;
      var b = this.Bounds();
      var x0 = b.getSouthWest().lng();
      var y0 = b.getSouthWest().lat();
      for (var i=0; i < this.getPath().getLength(); i++) {
        j++;
        if (j == this.getPath().getLength()) {j = 0;}
        var x1 = this.getPath().getAt(i).distanceFrom(new google.maps.LatLng(this.getPath().getAt(i).lat(),x0));
        var x2 = this.getPath().getAt(j).distanceFrom(new google.maps.LatLng(this.getPath().getAt(j).lat(),x0));
        var y1 = this.getPath().getAt(i).distanceFrom(new google.maps.LatLng(y0,this.getPath().getAt(i).lng()));
        var y2 = this.getPath().getAt(j).distanceFrom(new google.maps.LatLng(y0,this.getPath().getAt(j).lng()));
        a += x1*y2 - x2*y1;
      }
      return Math.abs(a * 0.5);
    }
	this.addListener();
}
//sửa ở đây để hiện thông tin về cơ sở nuôi
function Info(polygon, map) {
    //Thong tin co so nuoi trong
	this.sSodoaonuoi = polygon.sSodoaonuoi;
    this.sVietGAP = polygon.sVietGAP;
    this.sTencoso = polygon.sTencoso;
    this.sDoituong = polygon.sDoituong;
    this.sDientich = polygon.sDientich;
    this.sNgaycap = polygon.sNgaycap;
    //
    this.parent = polygon;
	this.map=map;
	this.color=document.createElement('input');
	this.button=document.createElement('input');
	$(this.button).attr('type','button');
	$(this.button).val("Change Color");
	var thisOjb=this;
	this.changeColor=function()
	{
		thisOjb.parent.setColor($(thisOjb.color).val());
	}
	var img, ul, li, divImg, divUl, bTag;
	//-------------
	this.getContent=function()
	{
		var content=document.createElement('div');
		img = document.createElement('img');
		divImg = document.createElement('div');
		divImg.id = "divImg";
		divUl = document.createElement('div');
		divUl.id = "divUl";
		//$(this.color).val(this.parent.getColor());
		//$(this.button).click(function(){thisObj.changeColor();});
		//$(content).append(this.color);
		img.width = 120;
		img.height = 120;
		img.src = "Images/" + this.sSodoaonuoi;
		//img.src = "Images/1(23).gif";
		$(divImg).append(img)
		$(content).append(divImg);
		
		ul = document.createElement('ul');
		li = document.createElement('li');
		bTag = document.createElement('b');
		bTag.appendChild(document.createTextNode("Mã số VietGAP: "));
		li.appendChild(bTag);
		li.appendChild(document.createTextNode(this.sVietGAP));
		ul.appendChild(li);
		
		li = document.createElement('li');
		bTag = document.createElement('b');
		bTag.appendChild(document.createTextNode("Tên cơ sở: "));
		li.appendChild(bTag);
		li.appendChild(document.createTextNode(this.sTencoso));
		ul.appendChild(li);
		
		li = document.createElement('li');
		bTag = document.createElement('b');
		bTag.appendChild(document.createTextNode("Đối tượng: "));
		li.appendChild(bTag);
		li.appendChild(document.createTextNode(this.sDoituong));
		ul.appendChild(li);
		
		li = document.createElement('li');
		bTag = document.createElement('b');
		bTag.appendChild(document.createTextNode("Diện tích: "));
		li.appendChild(bTag);
		var supTag = document.createElement('sup');
		supTag.appendChild(document.createTextNode("2"));
		li.appendChild(document.createTextNode(this.sDientich + " m"));
		li.appendChild(supTag);
		ul.appendChild(li);
		
		li = document.createElement('li');
		bTag = document.createElement('b');
		bTag.appendChild(document.createTextNode("Ngày cấp: "));
		li.appendChild(bTag);
		li.appendChild(document.createTextNode(this.sNgaycap));
		ul.appendChild(li);
			
		$(divUl).append(ul);
		$(content).append(divUl);
		//$(content).append(this.button);
		//$(content).appendChild(myDiv);
		//$(content).innerHTML = myDiv;
		//$(content).append(myDiv);
		return content;
	}
	thisObj=this;
	this.infoWidObj=new google.maps.InfoWindow({content:thisObj.getContent()});
	this.show=function(latLng)
	{
		this.infoWidObj.setPosition(latLng);
		this.infoWidObj.open(this.map);
	}
	this.remove=function(){this.infoWidObj.close();}
}